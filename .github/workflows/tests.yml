name: Testing the package in various scenarios
  # https://github.com/psf/black/actions/runs/17158461/workflow
on:
  push:
    branches:
      - main

jobs:

  # Goal is to test the package with various version of python
  test_py_version:

    # Run on latest ubuntu for various version of python
    runs-on: ubuntu-20.04
    strategy:
      matrix:
        python-version: [3.6, 3.7, 3.8, 3.9]
        # python-version: 3.9

    # The process
    steps:
      # Create environment
      - uses: actions/checkout@v2

      - name: Set up Python ${{ matrix.python-version }}
        uses: actions/setup-python@v2
        with:
          python-version: ${{ matrix.python-version }}

      # Install pymmdt locally
      - name: Install dependencies locally
        run: |
          sudo apt-get update
          # sudo apt-get install -y python3-opencv
          sudo apt-get install ffmpeg libsm6 libxext6 -y
          python3 -m pip install --upgrade pip
          python3 -m pip install .

      # Test the build
      - name: Test with unittest
        run: |
          python -m unittest discover tests/
  
  # Test the build dist
  test_build_dist:

    # Runs on latest ubuntu
    runs-on: ubuntu-20.04 # ubuntu-latest
    strategy:
      matrix:
        python-version: [3.6, 3.7, 3.8, 3.9]
        # python-version: 3.9

    # The process
    steps:
      - uses: actions/checkout@v2

      # Setting up Python
      - name: Set up Python ${{ matrix.python-version }}
        uses: actions/setup-python@v2
        with:
          python-version: ${{ matrix.python-version }}

      # Build to upload
      - name: Build Package
        run: |
          sudo apt-get update
          python3 -m pip install --upgrade build
          python3 -m build

      # Install the build wheel
      - name: Install the Wheel
        run: |
          python3 -m pip install dist/*.whl
  
  # Deploy the package to test pypi
  test_deploy:

    # Runs on latest ubuntu
    runs-on: ubuntu-20.04 # ubuntu-latest

    # The process
    steps:
      - uses: actions/checkout@v2

      # Setting up Python
      - name: Set up Python 3.9 
        uses: actions/setup-python@v2
        with:
          python-version: "3.9"

      # Build to upload
      - name: Build Package
        run: |
          sudo apt-get update
          python3 -m pip install --upgrade build
          python3 -m build

      # Check the build with twine
      - name: Check Build
        run: |
          pip install --upgrade twine
          twine check dist/*

      # Upload to Test PyPI
      - name: Publish Test PYPI
        uses: pypa/gh-action-pypi-publish@master
        with:
            password: ${{ secrets.TEST_PYPI_API_TOKEN }}
            repository_url: https://test.pypi.org/legacy/

  # Goal is to test the deployed build from test pypi
  test_deployed_test_build:

    # Run on latest ubuntu for various version of python
    runs-on: ubuntu-20.04 # ubuntu-latest
    strategy:
      matrix:
        python-version: [3.6, 3.7, 3.8, 3.9]
        # python-version: 3.9

    # The process
    steps:
      # Create environment
      - uses: actions/checkout@v2

      - name: Set up Python ${{ matrix.python-version }}
        uses: actions/setup-python@v2
        with:
          python-version: ${{ matrix.python-version }}

      # Install pymmdt
      - name: Install dependencies from test PyPI
        run: |
          sudo apt-get update
          # sudo apt-get install -y python3-opencv
          sudo apt-get install ffmpeg libsm6 libxext6 -y
          python3 -m pip install --upgrade pip
          pip install --extra-index-url https://test.pypi.org/simple/ pymmdt

      # Test the build
      - name: Test with unittest
        run: |
          python -m unittest discover tests/

      - name: Trigger next workflow
        if: success()
        uses: peter-evans/repository-dispatch@v1
        with:
          token: ${{ secrets.REPO_GHA_PAT }}
          repository: ${{ github.repository }}
          event-type: trigger-deploy-workflow
          client-payload: '{"ref": "${{ github.ref }}", "sha": "${{ github.sha }}"}'
